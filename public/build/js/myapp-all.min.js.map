{"version":3,"sources":["myapp.js","XLSXReaderService.js","authInterceptor.js","authService.js","backendService.js","loginModal.js","applicationController.js","navController.js","profileModalController.js"],"names":[],"mappingsjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxfile":"myapp-all.min.js","sourcesContent":["angular\n.module('myapp', [\n    'ui.router',\n    'ngStorage',\n    'ngTasty',\n    'angular-jwt',\n    'oc.lazyLoad',\n    'ui.bootstrap',\n    'angular-growl',\n    'restangular',\n    'angular-loading-bar',\n    'ngLodash'\n    ])\n\n.constant('API', '/')\n.constant('MyAppConfig', {\n    TimeToRefreshToken: 5, // 要更新token的時間(分鐘)\n})\n\n.config(['$httpProvider', 'jwtInterceptorProvider', '$stateProvider', '$urlRouterProvider', '$ocLazyLoadProvider', 'growlProvider', 'cfpLoadingBarProvider',\n    function($httpProvider, jwtInterceptorProvider, $stateProvider, $urlRouterProvider, $ocLazyLoadProvider, growlProvider, cfpLoadingBarProvider)\n{\n    jwtInterceptorProvider.tokenGetter =['jwtHelper', '$http', 'Auth', 'config', function(jwtHelper, $http, Auth, config) {\n\n        if (config.url.substr(config.url.length - 5) == '.html') {\n            return null;\n        }\n\n        var idToken = Auth.getToken();\n\n        //var refreshToken = localStorage.getItem('refresh_token');\n        if ( idToken && Auth.willTokenExpired(idToken) ) {\n            console.log('token need refresh...');\n            // This is a promise of a JWT id_token\n            return $http({\n                url: 'auth/refresh_jwt',\n                // This makes it so that this request doesn't send the JWT\n                skipAuthorization: true,\n                method: 'POST',\n                data: {\n                    //grant_type: 'refresh_token',\n                    old_token: idToken\n                }\n            }).then(function(response) {\n                var new_token = response.data.token;\n                console.log('return new token...');\n                //Auth.saveToken( new_token );\n                return new_token;\n            });\n        } else {\n            return idToken;\n        }\n    }];\n    $httpProvider.interceptors.push('jwtInterceptor');\n    $httpProvider.interceptors.push('authInterceptor');\n\n    // disable spinner, only loading bar\n    cfpLoadingBarProvider.includeSpinner = false;\n\n    growlProvider.globalTimeToLive({success: 2000, error: 3000, warning: 3000, info: 3000});\n    growlProvider.globalDisableCountDown(true);\n    growlProvider.globalPosition('bottom-right');\n    growlProvider.messagesKey(\"messages\");\n    growlProvider.messageTextKey(\"content\");\n    growlProvider.messageTitleKey(\"title\");\n    growlProvider.messageSeverityKey(\"type\");\n\n\n    $httpProvider.interceptors.push(growlProvider.serverMessagesInterceptor);\n\n    //$ocLazyLoadProvider.config ({\n    //    debug: true\n    //});\n\n    $urlRouterProvider.otherwise(\"/\");\n    $stateProvider\n        .state('index', {\n            url: \"/\",\n            templateUrl: \"partials/index.html\",\n            data: {\n                requireLogin: false\n            },\n            //controllerAs: 'index',\n            //resolve: {\n            //    loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){\n            //        return $ocLazyLoad.load('build/js/controllers/dashboardController.min.js');\n            //    }]\n            //}\n        })\n\n        .state('auth', {\n            abstract: true,\n            template: '<ui-view />',\n            data: {\n                requireLogin: true\n            }\n        })\n        // 登入後轉至此，依據 role 轉到對應的 state\n        .state('auth.dashboard', {\n            url: \"/dashboard\",\n            template: \"\",\n            controller: \"DashboardController\",\n            //controllerAs: 'dashboard',\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){\n                    return $ocLazyLoad.load('build/js/controllers/dashboardController.min.js');\n                }]\n            }\n        })\n\n        .state('auth.admin', {\n            url: \"/admin\",\n            templateUrl: \"partials/admin/dashboard.html\",\n            data: {\n                requireRole: ['admin']\n            }\n        })\n        .state('auth.admin.users', {\n            url: \"/users\",\n            templateUrl: \"partials/admin/users.html\",\n            controller: \"AdminUsersController\",\n            controllerAs: 'adminUsers',\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/adminUsersController.min.js');\n                }]\n            }\n        })\n        .state('auth.admin.classes', {\n            url: \"/classes\",\n            templateUrl: \"partials/admin/classes.html\",\n            controller: \"AdminClassesController\",\n            controllerAs: 'AdminClasses',\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/adminClassesController.min.js');\n                }]\n            }\n        })\n        .state('auth.admin.settings', {\n            url: \"/settings\",\n            templateUrl: \"partials/admin/settings.html\",\n            controller: \"AdminSettingsController\",\n            controllerAs: 'vmCtrl',\n            data: {\n                requireRole: ['admin']\n            },\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/adminSettingsController.min.js');\n                }]\n            }\n        })\n\n        .state('auth.teacher', {\n            url: \"/teacher\",\n            templateUrl: \"partials/teacher/dashboard.html\",\n            controller: \"TeacherDashboardController\",\n            controllerAs: 'teacherDashboard',\n            data: {\n                requireRole: ['teacher']\n            },\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/teacherDashboardController.min.js');\n                }]\n            }\n        })\n        .state('auth.teacher.new-class', {\n            url: \"^/classrooms\",\n            templateUrl: \"partials/teacher/newClassForm.html\",\n            controller: \"NewClassController\",\n            controllerAs: 'NewClass',\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/newClassController.min.js');\n                }]\n            }\n        })\n        .state('auth.teacher.edit-class', {\n            url: \"^/classrooms/:id\",\n            templateUrl: \"partials/teacher/editClassForm.html\",\n            controller: \"EditClassController\",\n            controllerAs: 'EditClass',\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/editClassController.min.js');\n                }]\n            }\n        })\n        .state('auth.teacher.students', {\n            url: \"^/classrooms/:id/students\",\n            templateUrl: \"partials/teacher/students.html\",\n            controller: \"StudentsController\",\n            controllerAs: 'Student',\n            resolve: {\n                classroom: ['Restangular', '$stateParams', function(Restangular, $stateParams){\n                    return Restangular.one('classrooms', $stateParams.id).get()\n                            .then(\n                                function(data){\n                                    return data;\n                                });\n                }],\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load([\n                        'build/js/controllers/studentsController.min.js',\n                        'build/js/alasql.min.js'\n                    ]);\n                }]\n            }\n        })\n        .state('auth.teacher.exams', {\n            url: \"^/classrooms/:id/exams\",\n            templateUrl: \"partials/teacher/exams.html\",\n            controller: \"ExamsController\",\n            controllerAs: 'Exam',\n            resolve: {\n                classroom: ['Restangular', '$stateParams', function(Restangular, $stateParams){\n                    return Restangular.one('classrooms', $stateParams.id).get()\n                        .then(\n                            function(data){\n                                return data;\n                        });\n                }],\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/examsController.min.js');\n                }]\n            }\n        })\n        .state('auth.teacher.scores', {\n            url: \"^/classrooms/:id/exams/:eid/scores\",\n            templateUrl: \"partials/teacher/exam-scores.html\",\n            controller: \"ScoresController\",\n            controllerAs: 'Score',\n            resolve: {\n                exam: ['Restangular', '$stateParams', function(Restangular, $stateParams){\n                    return Restangular.one('classrooms', $stateParams.id)\n                        .one('exams', $stateParams.eid).get()\n                        //.all('scores')\n                        //.getList()\n                        .then(\n                            function(data){\n                                return data;\n                        });\n                }],\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/scoresController.min.js');\n                }]\n            }\n        })\n\n        .state('auth.parents', {\n            url: \"/parents\",\n            templateUrl: \"partials/parents/dashboard.html\",\n            controller: \"ParentDashboardController\",\n            controllerAs: 'ParentDashboard',\n            data: {\n                requireRole: ['parents']\n            },\n            resolve: {\n                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\n                    return $ocLazyLoad.load('build/js/controllers/parentDashboardController.min.js');\n                }],\n                //isAuthenticated: ['Auth', function(Auth){\n                //    return Auth.isAuthenticated();\n                //}]\n            }\n        });\n\n}])\n\n.run(['$rootScope', 'Auth', 'loginModal', '$state', function ($rootScope, Auth, loginModal, $state) {\n\n    $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {\n        var requireLogin = toState.data.requireLogin;\n        var requireRole = toState.data.requireRole;\n\n        // 需要登入 且 未登入或已逾期\n        // 則登出 user 並彈出登入 modal\n        if ( requireLogin && (!Auth.isAuthenticated() || Auth.isTokenExpired()) ) {\n            event.preventDefault();\n\n            loginModal()\n                .then(function () {\n                    //return $state.go(toState.name, toParams);\n                })\n                .catch(function () {\n                    return $state.go('index');\n                });\n\n            return;\n        }else if( Auth.isAuthenticated()　&& Auth.isTokenExpired() ){\n            // 已登入，但逾期\n            console.log('token已逾期....');\n            return $state.go(toState, toParams);\n        }\n\n        // 如果有要求權限，則檢查是否有權限\n        if( requireRole && requireRole.length && !Auth.hasPermission(requireRole) ){\n            console.log('權限不足....');\n            event.preventDefault();\n            $rootScope.$broadcast('permission_deny');\n        }\n    });\n\n}]);","angular.module(\"myapp\").\nfactory(\"XLSXReaderService\", ['$q', '$rootScope',\n    function($q, $rootScope) {\n        var service = function(data) {\n            angular.extend(this, data);\n        }\n\n        service.readFile = function(file, readCells, toJSON) {\n            var deferred = $q.defer();\n\n            XLSXReader(file, readCells, toJSON, function(data) {\n                $rootScope.$apply(function() {\n                    deferred.resolve(data);\n                });\n            });\n\n            return deferred.promise;\n        }\n\n        return service;\n    }\n]);","angular.module('myapp')\n.factory('authInterceptor',['$rootScope', '$location', 'jwtHelper', 'Auth', '$timeout', '$q', '$injector',\nfunction($rootScope, $location, jwtHelper, Auth, $timeout, $q, $injector)\n{\n    var obj = {}\n    var loginModal, $http, $state, cfpLoadingBar;\n\n    // this trick must be done so that we don't receive\n    // `Uncaught Error: [$injector:cdep] Circular dependency found`\n    $timeout(function () {\n        loginModal = $injector.get('loginModal');\n        $http = $injector.get('$http');\n        $state = $injector.get('$state');\n    });\n\n    //obj.request = function(config){\n    //    config.headers = config.headers || {};\n    //    var token = Auth.getToken();\n    //    //if( token ){\n    //    //    var endAt = jwtHelper.getTokenExpirationDate(token);\n    //    //    if( endAt.valueOf() - new Date().valueOf() < 59*60*1000 ){\n    //    //        $http.get('auth/refresh_jwt').then(\n    //    //            function(response){\n    //    //                console.log('new token:' + response.data.token);\n    //    //            },\n    //    //            function(error){\n    //    //                console.log('error:' + error);\n    //    //            }\n    //    //        );\n    //    //        console.log(\"token 即將逾期....\" + '' );\n    //    //    }\n    //    //    console.log(\"token 有效時間剩下....\" + (endAt.valueOf() - new Date().valueOf()) );\n    //    //\n    //    //}\n    //    if( token && config.url.substr(config.url.length - 5) !== '.html' ){\n    //        config.headers.Authorization = 'Bearer ' + token;\n    //    }\n    //\n    //    return config;\n    //};\n\n    obj.response = function(response){\n        //取得登入後附加在 url 的 token 或 之後由 api 回傳之 token\n        var token = $location.search()['token'] || response.data.token;\n\n        if( token !== undefined ) {\n            Auth.saveToken( token );\n            console.log('token saved...');\n            if(response.data.token_type !== undefined && response.data.token_type === 'refresh_profile'){\n                // fresh token\n                // 停留在原畫面\n                $rootScope.$broadcast('profile_update_success');\n                //$location.url($location.path());\n            }else if(response.data.token_type !== 'refresh_only'){\n                // user logined\n                // 導向至 dashboard，可藉此去除 url 之 token，再依據 user role 導向\n                $rootScope.$broadcast('UserLogined');\n                //$location.url($location.path());\n                $location.url('/dashboard');\n            }\n        }\n\n        return response;\n    }\n\n    //obj.responseError = function(response){\n    //    if( response.status == 400 || response.status == 401 || response.status == 403 || response.status == 404 ) {\n    //        Auth.logoutUser();\n    //        $location.url('/login');\n    //        console.log('status = ' + response.status);\n    //    }\n    //\n    //    return response;\n    //}\n\n    obj.responseError = function (rejection) {\n        console.log('response error:');\n        console.log(rejection);\n\n        if(rejection.data[0] === 'token_invalid'){\n            Auth.deleteToken();\n        }\n        //if (rejection.status !== 400 && rejection.status !== 401 && rejection.status !== 403 && rejection.status !== 404) {\n        //    return rejection;\n        //}\n        if (rejection.status !== 400 && rejection.status !== 401) {\n\n            return rejection;\n        }\n\n        var deferred = $q.defer();\n\n        loginModal()\n            .then(function () {\n                deferred.resolve( $http(rejection.config) );\n            })\n            .catch(function () {\n                $state.go('index');\n                deferred.reject(rejection);\n            });\n\n        return deferred.promise;\n    }\n\n    return obj;\n}]);","angular.module('myapp')\n.factory('Auth',['$rootScope', '$localStorage', 'jwtHelper', '$q', '$injector', '$timeout', 'MyAppConfig',\nfunction($rootScope, $localStorage, jwtHelper, $q, $injector, $timeout, MyAppConfig)\n{\n    var obj = {};\n\n    var $http;\n    $timeout(function () {\n        $http = $injector.get('$http');\n    });\n\n\n    //是否已驗證\n    obj.isAuthenticated = function(){\n        return obj.getToken() ? true : false;\n    };\n\n    // token 是否逾期\n    obj.isTokenExpired = function(){\n        var result;\n        // 若逾期，則清除 token 並廣播\n        if( result = jwtHelper.isTokenExpired( obj.getToken() ) ){\n            $localStorage.$reset();\n            $rootScope.$broadcast('token_expired');\n        }\n        return result;\n    };\n\n    // token 是否快要逾期？\n    obj.willTokenExpired = function(token){\n        var result;\n        var timeToRefresh = MyAppConfig.TimeToRefreshToken; // 要更新token的時間(分鐘)\n\n        var expiredAt = jwtHelper.getTokenExpirationDate(token);\n\n        // 是否快逾期？\n        result = !obj.isTokenExpired() && (expiredAt.valueOf() - new Date().valueOf() < timeToRefresh*60*1000);\n\n        return result;\n    }\n\n    //從 local storage 取出 JWT token\n    obj.getToken = function(){\n        return $localStorage.myAuthToken;\n    };\n\n    // 取出 token payload\n    obj.getTokenPayload = function(){\n        return jwtHelper.decodeToken( obj.getToken() );\n    }\n\n    //JWT token 存入 local storage\n    obj.saveToken = function( token ){\n        //console.log(jwtHelper.decodeToken( token ));\n        $localStorage.myAuthToken = token;\n    };\n\n    obj.deleteToken = function(){\n        $localStorage.$reset();\n    }\n\n    // 由 token 取得目前登入 user 之資料\n    obj.getCurrentUserFromToken = function(){\n        var payload = obj.getTokenPayload();\n        return {\n            id:         payload.sub,\n            real_name:  payload.real_name,\n            provider:   payload.provider, // local、facebook、google、openid\n            roles:      payload.roles  // 例如：['admin', 'teacher', 'parents]\n        };\n    };\n\n    // 檢查是否有權限\n    obj.hasPermission = function(requireRole){\n        var userRoles = $rootScope.me.roles;\n        var key, pass = false;\n\n        for( key in requireRole ){\n            if(userRoles.indexOf(requireRole[key]) !== -1){\n                pass = true;\n                break;\n            }\n        }\n\n        return pass;\n    };\n\n    //登入 local user\n    obj.loginLocalUser = function(user){\n        //var $http = $injector.get(\"$http\");\n        return $http.post('auth/local', user, { ignoreLoadingBar: true }).success(function(response){\n\n            return response;\n        });\n    };\n\n    //登出 user\n    obj.logoutUser = function(){\n        $localStorage.$reset();\n        $rootScope.$broadcast('UserLogouted');\n    };\n\n    return obj;\n}]);","angular.module('myapp')\n.factory('Backend',['$http', '$q',\nfunction($http, $q)\n{\n    var obj = {};\n\n    // 取得 user list\n    obj.getUserList = function(){\n        var deferred = $q.defer();\n\n        $http.get('users')\n            .success(function(response){\n                deferred.resolve(response);\n            })\n            .error(function(error){\n                console.log(error);\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    };\n\n    // 以 id 取得 user 資料\n    obj.getUserData = function(id){\n        var deferred = $q.defer();\n\n        $http.get('users/:id',{id: id})\n            .success(function(user){\n                deferred.resolve(user);\n            })\n            .error(function (error) {\n                console.log(error);\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n\n    };\n\n    return obj;\n}]);","angular.module('myapp')\n.service('loginModal', ['$modal', '$rootScope', '$ocLazyLoad', function ($modal, $rootScope, $ocLazyLoad) {\n\n    return function() {\n        var instance = $modal.open({\n            templateUrl: 'partials/modals/login.html',\n            size: 'sm',\n            controller: 'LoginController',\n            controllerAs: 'login',\n            resolve:{\n                loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){\n                    return $ocLazyLoad.load('build/js/controllers/loginController.min.js');\n                }],\n                isAuthenticated: ['Auth', function(Auth){\n                    return Auth.isAuthenticated();\n                }]\n            }\n        });\n\n        $rootScope.$on('UserLogined', function(){\n            instance.close();\n        });\n\n        return instance.result;\n    };\n\n}]);","angular.module('myapp')\n.controller('ApplicationController', ['$rootScope', 'Auth', 'growl', '$state', '$location', 'Backend',\nfunction($rootScope, Auth, growl, $state, $location, Backend)\n{\n    var vm = this;\n\n    // 若已登入則取得 user 資料\n    if( $rootScope.logined = Auth.isAuthenticated() ) {\n        setCurrentUser();\n    }\n\n    // 監聽：UserLogined\n    $rootScope.$on('UserLogined', function(){\n        $rootScope.logined = true;\n        setCurrentUser();\n        growl.success('登入成功');\n    });\n\n    // 監聽：profile_update_success\n    $rootScope.$on('profile_update_success', function(){\n        setCurrentUser();\n        //growl.success('個人資料更新完成');\n    });\n\n    // 監聽：UserLogouted\n    $rootScope.$on('UserLogouted', function(){\n        clearData();\n        growl.success('您已成功登出');\n    });\n\n    // 監聽：token_expired\n    $rootScope.$on('token_expired', function(){\n        clearData();\n        growl.warning('憑證已逾期，請重新登入');\n    });\n\n    // 監聽：token_invalid\n    $rootScope.$on('token_invalid', function(){\n        clearData();\n        growl.error('憑證錯誤，請重新登入');\n    });\n\n    // 監聽：token_not_provided\n    $rootScope.$on('token_not_provided', function(){\n        clearData();\n        growl.error('缺少憑證，請先登入');\n    });\n\n    // 監聽：permission_deny\n    $rootScope.$on('permission_deny', function(){\n        growl.error('權限不足');\n    });\n\n    // 監聽：no_any_role\n    $rootScope.$on('no_any_role', function(){\n        growl.error('未設定角色，請聯絡網站管理員',{ttl: 10000, disableCountDown: false});\n    });\n\n    // 監聽：user_not_found\n    $rootScope.$on('user_not_found', function(){\n        clearData();\n    });\n\n    // 取得 user 資料\n    function setCurrentUser(){\n        $rootScope.me = Auth.getCurrentUserFromToken();\n    }\n\n    // 清除資料\n    function clearData(){\n        $rootScope.logined = false;\n        $rootScope.me = undefined;\n    }\n\n}]);","angular.module('myapp')\n.controller('navController', ['$rootScope', 'Auth', '$state', 'loginModal', '$modal', 'Restangular',\nfunction($rootScope, Auth, $state, loginModal, $modal, Restangular)\n{\n    var vm = this;\n\n    // 顯示登入 modal\n    vm.showLoginModal = loginModal;\n\n    // 顯示 profile modal\n    vm.editProfileModal = function(){\n        console.log($rootScope.me);\n        var modalInstance = $modal.open({\n            templateUrl: 'partials/modals/profile.html',\n            controller: 'profileModalController',\n            controllerAs: 'profile',\n            size: 'sm',\n            resolve: {\n                // userData 為 restangular 物件\n                userData: function () {\n                    //return $rootScope.me;\n                    return Restangular.one('users',$rootScope.me.id).get().then(function(data){return data;});\n                }\n            }\n        });\n\n        modalInstance.result.then(function (userData) {\n            // userData 為回傳之修改後之 restangular 物件\n            userData.mode = 'update_profile'; // 供後端判斷更新種類之用\n            console.log(userData);\n            userData.save();\n\n        }, function () {\n            console.log('Profile Modal dismissed at: ' + new Date());\n        });\n    };\n\n    vm.logout = function(){\n        Auth.logoutUser();\n        return $state.go('index');\n    };\n\n}]);","angular.module('myapp')\n.controller('profileModalController',\n['$modalInstance', 'userData', function ($modalInstance, userData) {\n    var vm = this;\n\n    //userData 為傳入之 restangular 物件\n    vm.userData = userData;\n    console.log(vm.userData);\n\n    // 決定 view 要不要顯示變更密碼的欄位\n    //vm.isLocalUser = $root.me.provider === 'local';\n\n    // 按下確定紐關閉 modal，將 restangular 物件回傳給 navController\n    vm.ok = function () {\n        $modalInstance.close(vm.userData);\n    };\n\n    // 按下取消紐關閉 modal\n    vm.cancel = function () {\n        $modalInstance.dismiss();\n    };\n\n}]);"],"sourceRoot":"/source/"}