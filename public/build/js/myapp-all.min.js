angular
.module('myapp', [
    'ui.router',
    'ngStorage',
    'ngTasty',
    'angular-jwt',
    'oc.lazyLoad',
    'ui.bootstrap',
    'angular-growl',
    'restangular',
    'angular-loading-bar',
    'ngLodash'
    ])

.constant('API', '/')
.constant('MyAppConfig', {
    TimeToRefreshToken: 5, // 要更新token的時間(分鐘)
})

.config(['$httpProvider', 'jwtInterceptorProvider', '$stateProvider', '$urlRouterProvider', '$ocLazyLoadProvider', 'growlProvider', 'cfpLoadingBarProvider',
    function($httpProvider, jwtInterceptorProvider, $stateProvider, $urlRouterProvider, $ocLazyLoadProvider, growlProvider, cfpLoadingBarProvider)
{
    jwtInterceptorProvider.tokenGetter =['jwtHelper', '$http', 'Auth', 'config', function(jwtHelper, $http, Auth, config) {

        if (config.url.substr(config.url.length - 5) == '.html') {
            return null;
        }

        var idToken = Auth.getToken();

        //var refreshToken = localStorage.getItem('refresh_token');
        if ( idToken && Auth.willTokenExpired(idToken) ) {
            console.log('token need refresh...');
            // This is a promise of a JWT id_token
            return $http({
                url: 'auth/refresh_jwt',
                // This makes it so that this request doesn't send the JWT
                skipAuthorization: true,
                method: 'POST',
                data: {
                    //grant_type: 'refresh_token',
                    old_token: idToken
                }
            }).then(function(response) {
                var new_token = response.data.token;
                console.log('return new token...');
                //Auth.saveToken( new_token );
                return new_token;
            });
        } else {
            return idToken;
        }
    }];
    $httpProvider.interceptors.push('jwtInterceptor');
    $httpProvider.interceptors.push('authInterceptor');

    // disable spinner, only loading bar
    cfpLoadingBarProvider.includeSpinner = false;

    growlProvider.globalTimeToLive({success: 2000, error: 3000, warning: 3000, info: 3000});
    growlProvider.globalDisableCountDown(true);
    growlProvider.globalPosition('bottom-right');
    growlProvider.messagesKey("messages");
    growlProvider.messageTextKey("content");
    growlProvider.messageTitleKey("title");
    growlProvider.messageSeverityKey("type");


    $httpProvider.interceptors.push(growlProvider.serverMessagesInterceptor);

    //$ocLazyLoadProvider.config ({
    //    debug: true
    //});

    $urlRouterProvider.otherwise("/");
    $stateProvider
        .state('index', {
            url: "/",
            templateUrl: "partials/index.html",
            data: {
                requireLogin: false
            },
            //controllerAs: 'index',
            //resolve: {
            //    loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){
            //        return $ocLazyLoad.load('build/js/controllers/dashboardController.min.js');
            //    }]
            //}
        })

        .state('auth', {
            abstract: true,
            template: '<ui-view />',
            data: {
                requireLogin: true
            }
        })
        // 登入後轉至此，依據 role 轉到對應的 state
        .state('auth.dashboard', {
            url: "/dashboard",
            template: "",
            controller: "DashboardController",
            //controllerAs: 'dashboard',
            resolve: {
                loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){
                    return $ocLazyLoad.load('build/js/controllers/dashboardController.min.js');
                }]
            }
        })

        .state('auth.admin', {
            url: "/admin",
            templateUrl: "partials/admin/dashboard.html",
            data: {
                requireRole: ['admin']
            }
        })
        .state('auth.admin.users', {
            url: "/users",
            templateUrl: "partials/admin/users.html",
            controller: "AdminUsersController",
            controllerAs: 'adminUsers',
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/adminUsersController.min.js');
                }]
            }
        })
        .state('auth.admin.classes', {
            url: "/classes",
            templateUrl: "partials/admin/classes.html",
            controller: "AdminClassesController",
            controllerAs: 'AdminClasses',
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/adminClassesController.min.js');
                }]
            }
        })
        .state('auth.admin.settings', {
            url: "/settings",
            templateUrl: "partials/admin/settings.html",
            controller: "AdminSettingsController",
            controllerAs: 'vmCtrl',
            data: {
                requireRole: ['admin']
            },
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/adminSettingsController.min.js');
                }]
            }
        })

        .state('auth.teacher', {
            url: "/teacher",
            templateUrl: "partials/teacher/dashboard.html",
            controller: "TeacherDashboardController",
            controllerAs: 'teacherDashboard',
            data: {
                requireRole: ['teacher']
            },
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/teacherDashboardController.min.js');
                }]
            }
        })
        .state('auth.teacher.new-class', {
            url: "^/classrooms",
            templateUrl: "partials/teacher/newClassForm.html",
            controller: "NewClassController",
            controllerAs: 'NewClass',
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/newClassController.min.js');
                }]
            }
        })
        .state('auth.teacher.edit-class', {
            url: "^/classrooms/:id",
            templateUrl: "partials/teacher/editClassForm.html",
            controller: "EditClassController",
            controllerAs: 'EditClass',
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/editClassController.min.js');
                }]
            }
        })
        .state('auth.teacher.students', {
            url: "^/classrooms/:id/students",
            templateUrl: "partials/teacher/students.html",
            controller: "StudentsController",
            controllerAs: 'Student',
            resolve: {
                classroom: ['Restangular', '$stateParams', function(Restangular, $stateParams){
                    return Restangular.one('classrooms', $stateParams.id).get()
                            .then(
                                function(data){
                                    return data;
                                });
                }],
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load([
                        'build/js/controllers/studentsController.min.js',
                        'build/js/alasql.min.js'
                    ]);
                }]
            }
        })
        .state('auth.teacher.exams', {
            url: "^/classrooms/:id/exams",
            templateUrl: "partials/teacher/exams.html",
            controller: "ExamsController",
            controllerAs: 'Exam',
            resolve: {
                classroom: ['Restangular', '$stateParams', function(Restangular, $stateParams){
                    return Restangular.one('classrooms', $stateParams.id).get()
                        .then(
                            function(data){
                                return data;
                        });
                }],
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/examsController.min.js');
                }]
            }
        })
        .state('auth.teacher.scores', {
            url: "^/classrooms/:id/exams/:eid/scores",
            templateUrl: "partials/teacher/exam-scores.html",
            controller: "ScoresController",
            controllerAs: 'Score',
            resolve: {
                exam: ['Restangular', '$stateParams', function(Restangular, $stateParams){
                    return Restangular.one('classrooms', $stateParams.id)
                        .one('exams', $stateParams.eid).get()
                        //.all('scores')
                        //.getList()
                        .then(
                            function(data){
                                return data;
                        });
                }],
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/scoresController.min.js');
                }]
            }
        })

        .state('auth.parents', {
            url: "/parents",
            templateUrl: "partials/parents/dashboard.html",
            controller: "ParentDashboardController",
            controllerAs: 'ParentDashboard',
            data: {
                requireRole: ['parents']
            },
            resolve: {
                loadCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                    return $ocLazyLoad.load('build/js/controllers/parentDashboardController.min.js');
                }],
                //isAuthenticated: ['Auth', function(Auth){
                //    return Auth.isAuthenticated();
                //}]
            }
        });

}])

.run(['$rootScope', 'Auth', 'loginModal', '$state', function ($rootScope, Auth, loginModal, $state) {

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {
        var requireLogin = toState.data.requireLogin;
        var requireRole = toState.data.requireRole;

        // 需要登入 且 未登入或已逾期
        // 則登出 user 並彈出登入 modal
        if ( requireLogin && (!Auth.isAuthenticated() || Auth.isTokenExpired()) ) {
            event.preventDefault();

            loginModal()
                .then(function () {
                    //return $state.go(toState.name, toParams);
                })
                .catch(function () {
                    return $state.go('index');
                });

            return;
        }else if( Auth.isAuthenticated()　&& Auth.isTokenExpired() ){
            // 已登入，但逾期
            console.log('token已逾期....');
            return $state.go(toState, toParams);
        }

        // 如果有要求權限，則檢查是否有權限
        if( requireRole && requireRole.length && !Auth.hasPermission(requireRole) ){
            console.log('權限不足....');
            event.preventDefault();
            $rootScope.$broadcast('permission_deny');
        }
    });

}]);
angular.module("myapp").
factory("XLSXReaderService", ['$q', '$rootScope',
    function($q, $rootScope) {
        var service = function(data) {
            angular.extend(this, data);
        }

        service.readFile = function(file, readCells, toJSON) {
            var deferred = $q.defer();

            XLSXReader(file, readCells, toJSON, function(data) {
                $rootScope.$apply(function() {
                    deferred.resolve(data);
                });
            });

            return deferred.promise;
        }

        return service;
    }
]);
angular.module('myapp')
.factory('authInterceptor',['$rootScope', '$location', 'jwtHelper', 'Auth', '$timeout', '$q', '$injector',
function($rootScope, $location, jwtHelper, Auth, $timeout, $q, $injector)
{
    var obj = {}
    var loginModal, $http, $state, cfpLoadingBar;

    // this trick must be done so that we don't receive
    // `Uncaught Error: [$injector:cdep] Circular dependency found`
    $timeout(function () {
        loginModal = $injector.get('loginModal');
        $http = $injector.get('$http');
        $state = $injector.get('$state');
    });

    //obj.request = function(config){
    //    config.headers = config.headers || {};
    //    var token = Auth.getToken();
    //    //if( token ){
    //    //    var endAt = jwtHelper.getTokenExpirationDate(token);
    //    //    if( endAt.valueOf() - new Date().valueOf() < 59*60*1000 ){
    //    //        $http.get('auth/refresh_jwt').then(
    //    //            function(response){
    //    //                console.log('new token:' + response.data.token);
    //    //            },
    //    //            function(error){
    //    //                console.log('error:' + error);
    //    //            }
    //    //        );
    //    //        console.log("token 即將逾期...." + '' );
    //    //    }
    //    //    console.log("token 有效時間剩下...." + (endAt.valueOf() - new Date().valueOf()) );
    //    //
    //    //}
    //    if( token && config.url.substr(config.url.length - 5) !== '.html' ){
    //        config.headers.Authorization = 'Bearer ' + token;
    //    }
    //
    //    return config;
    //};

    obj.response = function(response){
        //取得登入後附加在 url 的 token 或 之後由 api 回傳之 token
        var token = $location.search()['token'] || response.data.token;

        if( token !== undefined ) {
            Auth.saveToken( token );
            console.log('token saved...');
            if(response.data.token_type !== undefined && response.data.token_type === 'refresh_profile'){
                // fresh token
                // 停留在原畫面
                $rootScope.$broadcast('profile_update_success');
                //$location.url($location.path());
            }else if(response.data.token_type !== 'refresh_only'){
                // user logined
                // 導向至 dashboard，可藉此去除 url 之 token，再依據 user role 導向
                $rootScope.$broadcast('UserLogined');
                //$location.url($location.path());
                $location.url('/dashboard');
            }
        }

        return response;
    }

    //obj.responseError = function(response){
    //    if( response.status == 400 || response.status == 401 || response.status == 403 || response.status == 404 ) {
    //        Auth.logoutUser();
    //        $location.url('/login');
    //        console.log('status = ' + response.status);
    //    }
    //
    //    return response;
    //}

    obj.responseError = function (rejection) {
        console.log('response error:');
        console.log(rejection);

        if(rejection.data[0] === 'token_invalid'){
            Auth.deleteToken();
        }
        //if (rejection.status !== 400 && rejection.status !== 401 && rejection.status !== 403 && rejection.status !== 404) {
        //    return rejection;
        //}
        if (rejection.status !== 400 && rejection.status !== 401) {

            return rejection;
        }

        var deferred = $q.defer();

        loginModal()
            .then(function () {
                deferred.resolve( $http(rejection.config) );
            })
            .catch(function () {
                $state.go('index');
                deferred.reject(rejection);
            });

        return deferred.promise;
    }

    return obj;
}]);
angular.module('myapp')
.factory('Auth',['$rootScope', '$localStorage', 'jwtHelper', '$q', '$injector', '$timeout', 'MyAppConfig',
function($rootScope, $localStorage, jwtHelper, $q, $injector, $timeout, MyAppConfig)
{
    var obj = {};

    var $http;
    $timeout(function () {
        $http = $injector.get('$http');
    });


    //是否已驗證
    obj.isAuthenticated = function(){
        return obj.getToken() ? true : false;
    };

    // token 是否逾期
    obj.isTokenExpired = function(){
        var result;
        // 若逾期，則清除 token 並廣播
        if( result = jwtHelper.isTokenExpired( obj.getToken() ) ){
            $localStorage.$reset();
            $rootScope.$broadcast('token_expired');
        }
        return result;
    };

    // token 是否快要逾期？
    obj.willTokenExpired = function(token){
        var result;
        var timeToRefresh = MyAppConfig.TimeToRefreshToken; // 要更新token的時間(分鐘)

        var expiredAt = jwtHelper.getTokenExpirationDate(token);

        // 是否快逾期？
        result = !obj.isTokenExpired() && (expiredAt.valueOf() - new Date().valueOf() < timeToRefresh*60*1000);

        return result;
    }

    //從 local storage 取出 JWT token
    obj.getToken = function(){
        return $localStorage.myAuthToken;
    };

    // 取出 token payload
    obj.getTokenPayload = function(){
        return jwtHelper.decodeToken( obj.getToken() );
    }

    //JWT token 存入 local storage
    obj.saveToken = function( token ){
        //console.log(jwtHelper.decodeToken( token ));
        $localStorage.myAuthToken = token;
    };

    obj.deleteToken = function(){
        $localStorage.$reset();
    }

    // 由 token 取得目前登入 user 之資料
    obj.getCurrentUserFromToken = function(){
        var payload = obj.getTokenPayload();
        return {
            id:         payload.sub,
            real_name:  payload.real_name,
            provider:   payload.provider, // local、facebook、google、openid
            roles:      payload.roles  // 例如：['admin', 'teacher', 'parents]
        };
    };

    // 檢查是否有權限
    obj.hasPermission = function(requireRole){
        var userRoles = $rootScope.me.roles;
        var key, pass = false;

        for( key in requireRole ){
            if(userRoles.indexOf(requireRole[key]) !== -1){
                pass = true;
                break;
            }
        }

        return pass;
    };

    //登入 local user
    obj.loginLocalUser = function(user){
        //var $http = $injector.get("$http");
        return $http.post('auth/local', user, { ignoreLoadingBar: true }).success(function(response){

            return response;
        });
    };

    //登出 user
    obj.logoutUser = function(){
        $localStorage.$reset();
        $rootScope.$broadcast('UserLogouted');
    };

    return obj;
}]);
angular.module('myapp')
.factory('Backend',['$http', '$q',
function($http, $q)
{
    var obj = {};

    // 取得 user list
    obj.getUserList = function(){
        var deferred = $q.defer();

        $http.get('users')
            .success(function(response){
                deferred.resolve(response);
            })
            .error(function(error){
                console.log(error);
                deferred.reject(error);
            });

        return deferred.promise;
    };

    // 以 id 取得 user 資料
    obj.getUserData = function(id){
        var deferred = $q.defer();

        $http.get('users/:id',{id: id})
            .success(function(user){
                deferred.resolve(user);
            })
            .error(function (error) {
                console.log(error);
                deferred.reject(error);
            });

        return deferred.promise;

    };

    return obj;
}]);
angular.module('myapp')
.service('loginModal', ['$modal', '$rootScope', '$ocLazyLoad', function ($modal, $rootScope, $ocLazyLoad) {

    return function() {
        var instance = $modal.open({
            templateUrl: 'partials/modals/login.html',
            size: 'sm',
            controller: 'LoginController',
            controllerAs: 'login',
            resolve:{
                loadCtrl: ['$ocLazyLoad', function($ocLazyLoad){
                    return $ocLazyLoad.load('build/js/controllers/loginController.min.js');
                }],
                isAuthenticated: ['Auth', function(Auth){
                    return Auth.isAuthenticated();
                }]
            }
        });

        $rootScope.$on('UserLogined', function(){
            instance.close();
        });

        return instance.result;
    };

}]);
angular.module('myapp')
.controller('ApplicationController', ['$rootScope', 'Auth', 'growl', '$state', '$location', 'Backend',
function($rootScope, Auth, growl, $state, $location, Backend)
{
    var vm = this;

    // 若已登入則取得 user 資料
    if( $rootScope.logined = Auth.isAuthenticated() ) {
        setCurrentUser();
    }

    // 監聽：UserLogined
    $rootScope.$on('UserLogined', function(){
        $rootScope.logined = true;
        setCurrentUser();
        growl.success('登入成功');
    });

    // 監聽：profile_update_success
    $rootScope.$on('profile_update_success', function(){
        setCurrentUser();
        //growl.success('個人資料更新完成');
    });

    // 監聽：UserLogouted
    $rootScope.$on('UserLogouted', function(){
        clearData();
        growl.success('您已成功登出');
    });

    // 監聽：token_expired
    $rootScope.$on('token_expired', function(){
        clearData();
        growl.warning('憑證已逾期，請重新登入');
    });

    // 監聽：token_invalid
    $rootScope.$on('token_invalid', function(){
        clearData();
        growl.error('憑證錯誤，請重新登入');
    });

    // 監聽：token_not_provided
    $rootScope.$on('token_not_provided', function(){
        clearData();
        growl.error('缺少憑證，請先登入');
    });

    // 監聽：permission_deny
    $rootScope.$on('permission_deny', function(){
        growl.error('權限不足');
    });

    // 監聽：no_any_role
    $rootScope.$on('no_any_role', function(){
        growl.error('未設定角色，請聯絡網站管理員',{ttl: 10000, disableCountDown: false});
    });

    // 監聽：user_not_found
    $rootScope.$on('user_not_found', function(){
        clearData();
    });

    // 取得 user 資料
    function setCurrentUser(){
        $rootScope.me = Auth.getCurrentUserFromToken();
    }

    // 清除資料
    function clearData(){
        $rootScope.logined = false;
        $rootScope.me = undefined;
    }

}]);
angular.module('myapp')
.controller('navController', ['$rootScope', 'Auth', '$state', 'loginModal', '$modal', 'Restangular',
function($rootScope, Auth, $state, loginModal, $modal, Restangular)
{
    var vm = this;

    // 顯示登入 modal
    vm.showLoginModal = loginModal;

    // 顯示 profile modal
    vm.editProfileModal = function(){
        console.log($rootScope.me);
        var modalInstance = $modal.open({
            templateUrl: 'partials/modals/profile.html',
            controller: 'profileModalController',
            controllerAs: 'profile',
            size: 'sm',
            resolve: {
                // userData 為 restangular 物件
                userData: function () {
                    //return $rootScope.me;
                    return Restangular.one('users',$rootScope.me.id).get().then(function(data){return data;});
                }
            }
        });

        modalInstance.result.then(function (userData) {
            // userData 為回傳之修改後之 restangular 物件
            userData.mode = 'update_profile'; // 供後端判斷更新種類之用
            console.log(userData);
            userData.save();

        }, function () {
            console.log('Profile Modal dismissed at: ' + new Date());
        });
    };

    vm.logout = function(){
        Auth.logoutUser();
        return $state.go('index');
    };

}]);
angular.module('myapp')
.controller('profileModalController',
['$modalInstance', 'userData', function ($modalInstance, userData) {
    var vm = this;

    //userData 為傳入之 restangular 物件
    vm.userData = userData;
    console.log(vm.userData);

    // 決定 view 要不要顯示變更密碼的欄位
    //vm.isLocalUser = $root.me.provider === 'local';

    // 按下確定紐關閉 modal，將 restangular 物件回傳給 navController
    vm.ok = function () {
        $modalInstance.close(vm.userData);
    };

    // 按下取消紐關閉 modal
    vm.cancel = function () {
        $modalInstance.dismiss();
    };

}]);
//# sourceMappingURL=myapp-all.min.js.map